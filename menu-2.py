#!/usr/bin/python
#
#
#Creation Date - 03/05/2017
#Latest update added Git Pull Requests
#Last Modified - 07/06/2017
#Python Pentest Menu 
#Version 1.2


#Imports
import datetime
import os
import subprocess
import time

#Define Colours
def prRed(prt): print("\033[91m {}\033[00m" .format(prt))
def prGreen(prt): print("\033[92m {}\033[00m" .format(prt))
def prYellow(prt): print("\033[93m {}\033[00m" .format(prt))
def prLightPurple(prt): print("\033[94m {}\033[00m" .format(prt))
def prPurple(prt): print("\033[95m {}\033[00m" .format(prt))
def prCyan(prt): print("\033[96m {}\033[00m" .format(prt))
def prLightGray(prt): print("\033[97m {}\033[00m" .format(prt))
def prBlack(prt): print("\033[98m {}\033[00m" .format(prt))

#Initally clear the screen
os.system('clear')


#Define Option 1 - NMAP Scan
def opt1():
    print "Enter the host to scan"
    option1 = raw_input(":")
    subprocess.call(['nmap', option1])
    print ""
    menu1 = raw_input("Press any key to return to the main menu")
    os.system('clear')
           
##Define Option 2 - NMAP Services Enumeration (-sV)
def opt2():
    print "What IP Would you like to enumerate?"
    ip = raw_input(":")
    subprocess.call(['nmap','-sV','-T4', ip])
    print ""
    menu_return2 = raw_input("Press any key to Return to the main menu")
    os.system('clear')

#Define Option 3 - Run Metasploit
def opt3():
    print "Loading Metasploit........."
    subprocess.call(['/usr/local/bin/msfconsole'])
    os.system('clear')

#Define Option 4 - Run BurpSuitePro
def opt4():
    print "Loading BurpSuitePro........."
    subprocess.call(['/opt/BurpSuitePro/BurpSuitePro'])
    os.system('clear')

#Define Option 5 - Run Netdiscover
def opt5():
    print "Please Enter the IP Address or Range to scan - PRESS 'ALT+q' To EXIT to Main Menu"
    netdiscover = raw_input("")
    nd = subprocess.call(['/usr/sbin/netdiscover','-r', netdiscover])
    os.system('clear')
                        
#Define Option 6 - Run Nikto
def opt6():
    print "Please enter the host or IP Address"
    nikto_input = raw_input("")
    os.system('clear')
    nikto = subprocess.call(["/opt/web-scanners/nikto/program/nikto.pl","-h", nikto_input])
    nikto_any_key = raw_input("Press Any key to Return to the main menu")
    os.system('clear')
                            
##Run Website Scans
#def opt20():
#    website_menu()


#Define Option 7 - Update Metasploit
def opt7():
    print "Updating Metasploit........"
    subprocess.call(['/usr/local/bin/msfupdate'])
    os.system('clear')
    
#Define Option 8 - Update Local System
def opt8():
    print "Running Update from Repos on Local System"
    os.system('apt-get update && apt-get upgrade')
    os.system('clear')

#Define Option 9 - Update Github Branches in /opt
def opt9():
    print "Update All Github Repos in /opt"
    git = subprocess.call('find /opt -name .git -type d | xargs -n1 -P4 -I% git --git-dir=% --work-tree=%/.. remote update -p', shell=True)
    os.system('clear')

#Define Option 10 - Display Local Network Information
def opt10():
    print "The Local Network Configuration of this OS are:"
    print ""
    ifconfig = subprocess.call(['/sbin/ifconfig'])
    dns = subprocess.call(['cat', '/etc/resolv.conf'])
    print ""
    lni_menu = raw_input("Press any Key to Continue")
    os.system('clear')
                            
    
#Define the Main Menu
def menu():
    prGreen("#########################################################")
    prPurple("Welcome to the t0ast Pentest Menu!")  
    prPurple("Please select from the following using numerical values")
    prGreen("#########################################################")
    print "                                  ", datetime.datetime.now()
    prLightPurple(" 1) System Tasks")
    prLightPurple(" 2) Application Specific Tasks")
    prLightPurple(" 3) Brute Forcers")
    prLightPurple(" 4) Enumeration Tools")
    prLightPurple(" 5) Exploitation Tools")
    prLightPurple(" 6) Evasion Tools")
    prLightPurple(" 7) Password Cracking Tools")
    prLightPurple(" 8) VPN Tools")
    prRed("11) Exit")
    

#Define System Tasks
def system_tasks():
    os.system('clear')
    prGreen("#########################################################")
    prPurple("Welcome to the t0ast Pentest Menu!")
    prPurple("Choose the appropriate website testing tool")
    print ""
    prLightPurple(" 1) Display Local Network information")
    prLightPurple(" 2) Github Branches (Update)")
    prLightPurple(" 3) Local System (Update)")
    prRed("4) Back")
    system_tasks_answer = input(":")
    if system_tasks_answer ==1:
        wm1()
    elif system_tasks_answer ==2:
        wm2()
    elif system_tasks_answer ==3:
        wm3()
    elif system_tasks_answer ==4:
        os.system('clear')
    else:
        raw_input("You did not give a valid answer, press any key to try again")
        os.system('clear')

#Define Application Specific Tools - Level 1
def application_specific_tools():
    os.system('clear')
    prGreen("#########################################################")
    prPurple("Welcome to the t0ast Pentest Menu!")
    prPurple("Choose an applications tool")
    print ""
    prLightPurple(" 1) Wordpress")
    prRed("2) Back")
    application_specific_tools_answer = input(":")
    if application_specific_tools ==1:
        ast()
    elif application_specific_tools ==2:
        os.system('clear')
    else:
        raw_input("You did not give a valid answer, press any key to try again")
        os.system('clear')

#Define Application Specific Tools - Level 2
def app_specific_tools_level_2():
    os.system('clear')
    prGreen("#########################################################")
    prPurple("Welcome to the t0ast Pentest Menu!")
    prPurple("Choose an WorddPress Sepcific tool")
    print ""
    prLightPurple(" 1) Wordpress XML RPC Brute Forcer")
    prLightPurple(" 2) WPFORCE")
    prLightPurple(" 3) WPSCAN")
    prLightPurple(" 4) WPSPLOIT")
    prLightPurple(" 5) WPWNER")
    prRed(" 6) Back")
    if app_specific_tools_level_2 ==1:
        print "add full path"
    if app_specific_tools_level_2 ==2:
        print "add full path"
    if app_specific_tools_level_2 ==3:
        print "add full path"
    if app_specific_tools_level_2 ==4:
        print "add full path"
    if app_specific_tools_level_2 ==5:
        print "add full path"
    else:
        raw_input("You did not give a valid answer, press any key to try again")
        os.system('clear')

loop=True

while loop:
    print menu()
    mm_answer = input(":")

    if mm_answer ==1:
        system_tasks()
    elif mm_answer ==2:
        application_specific_tools()
    elif mm_answer ==3:
        opt3()
    elif mm_answer ==4:
        opt4()
    elif mm_answer ==5:
        opt5()
    elif mm_answer ==6:
        opt6()
    elif mm_answer ==7:
        opt7()
    elif mm_answer ==8:
        opt8()
    elif mm_answer ==9:
        opt9()
    elif mm_answer ==10:
        opt10()
    elif mm_answer ==11:
        break
    elif mm_answer ==20:
        website_menu()
    else:
        raw_input("You did not give a valid answer, press any key to try again") 
        os.system('clear')

