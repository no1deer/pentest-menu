#!/usr/bin/python3.4
#
#
#Creation Date - 03/05/2017
#Latest update added Git Pull Requests
#Last Modified - 19/07/2017
#Python Pentest Menu 
#Version 2.0
#Latest mod Added Workspace Support (19/07/2017)



#Imports
import datetime
import os
import subprocess
import time
import shlex

#Define Colours
def prRed(prt): print("\033[91m {}\033[00m" .format(prt))
def prGreen(prt): print("\033[92m {}\033[00m" .format(prt))
def prYellow(prt): print("\033[93m {}\033[00m" .format(prt))
def prLightPurple(prt): print("\033[94m {}\033[00m" .format(prt))
def prPurple(prt): print("\033[95m {}\033[00m" .format(prt))
def prCyan(prt): print("\033[96m {}\033[00m" .format(prt))
def prLightGray(prt): print("\033[97m {}\033[00m" .format(prt))


#Set Globals for Workspace to 0
workspace = 0
absolute_path = 0


#Initally clear the screen
os.system('clear')

#Define Option 0 - Create a Workspace
def workspace_menu():
    print ("Enter the name of the Workspace or type 'q' or 'quit' to return to the main menu")
    print ("")
    workspace_input = input(":")
    if workspace_input in ("q", "quit"):
        os.system('clear')
    else:
#Define the current working directoy (__file__)
        script_dir = os.path.dirname(__file__)
        relative_path = 'workspaces/'
        joined_path = os.path.join(script_dir, relative_path)
        os.chdir(joined_path)
        if os.path.exists(workspace_input):
            print ("Directory already Exists! - Try a different name")
            input("Press any key to Return to the Main Menu")
            os.system('clear')
        else:
            make_path = os.makedirs(workspace_input)
            absolute_path = joined_path + workspace_input
            global absolute_path
            absolute_path = absolute_path
            global workspace
            workspace = 1
            print ("Workspace created!"), absolute_path
            input("Press any Key to Continue")
            os.system('clear')

#Banner
def banner():
    prGreen("                                                                        ")
    prGreen("                                                                     ,  ")
    prGreen("                                                        __...eee8888P   ")
    prGreen("                           .effe.     .e88e....____.e888888.*****`    , ")
    prGreen("                          ^888888b   :88888888888888888888eeee8888888P  ")
    prGreen("                          ^8888888b  :****8888888888888888888888****    ")
    prGreen("                           |`|`8888b.    o  `**8888******888**          ")
    prGreen("                               `8888b...__.  A.___.e888**'              ")
    prGreen("                                `8888888P d8888888888'  ,               ")
    prGreen(" Welcome to the Pentesters Menu    ***** d88888888P*****                ")
    prGreen("                                __..eed8888888888eee..                  ")
    prGreen("                        .|,|_.ed88888888***```````**888L                ")
    prGreen("                        `*YY*****'                                      ")
    prPurple("Please select from the following using numerical values")
    print ("                                  "), datetime.datetime.now()
                                                                
            
#Define the Main Menu
def menu():
    banner()
    prCyan(" 0) Add a Workspace")
    prLightPurple(" 1) System Tasks")
    prLightPurple(" 2) Application Specific Tasks")
    prLightPurple(" 3) Brute Forcers")
    prLightPurple(" 4) Enumeration Tools")
    prLightPurple(" 5) Exploitation Tools")
    prLightPurple(" 6) Evasion Tools")
    prLightPurple(" 7) Password Cracking Tools")
    prLightPurple(" 8) VPN Tools")
    prRed("11) Exit")
    

#Define System Tasks
def system_tasks():
    os.system('clear')
    banner()
    prLightPurple(" 1) Display Local Network information")
    prLightPurple(" 2) Github Branches (Update)")
    prLightPurple(" 3) Local System (Update)")
    prLightPurple(" 4) MAC Changer")
    prYellow(" 5) Back")
    system_tasks_answer = inputNumber(":")
    if system_tasks_answer ==1:
        print ("The Local Network Configuration of this OS are:")
        print ("")
        ifconfig = subprocess.call(['/sbin/ifconfig'])
        dns = subprocess.call(['cat', '/etc/resolv.conf'])
        print ("")
        lni_menu = input("Press any Key to Continue")
        system_tasks()
        os.system('clear')
    elif system_tasks_answer == 2:
        print ("Update All Github Repos in the local tools directory")
        git = subprocess.call('find ./tools -name .git -type d | xargs -n1 -P4 -I% git --git-dir=% --work-tree=%/.. remote update -p', shell=True)
        system_tasks()
        os.system('clear')
    elif system_tasks_answer == 3:
        print ("Running Update from Repos on Local System")
        os.system('apt-get update && apt-get upgrade')
        print ("")
        local_update = input("Press any key to continue")
        system_tasks()
        os.system('clear')
    elif system_tasks_answer == 4:
        os.system('clear')
        print ("MAC Changer")
        print ("Current MAC Address configured for eth0:")
        #current_mac_eth0 = subprocess.call("macchanger --show wlan0 | awk '/Current/'", shell=True stdout=PIPE)
        #current_mac_eth0 = subprocess.check_call(["macchanger", "--show", "wlan0", "|", "awk", "'/Current/'", stdout=None])
        current_mac_eth0 = subprocess.check_output("macchanger --show eth0 | awk '/Current/'", shell=True)
        #current_mac_eth0 = subprocess.Popen(["macchanger", "--show", "wlan0", "|", "awk", "'/Current/'"], stdout=subprocess.PIPE)
        print(current_mac_eth0)
        print ("")
        print ("Current MAC Address configured for wlan0:")
        current_mac_wlan0 = subprocess.check_output("macchanger --show wlan0 | awk '/Current/'", shell=True)
        print(current_mac_wlan0)
        print ("")
        prGreen ("What MAC Address would you like to select?")
        print ("")
        prRed ("(1)Auto Select - Random"), prLightPurple ("(2)Preset"), prPurple ("(3)Manual"), prYellow("(4)Go Back To Main Menu")
        print ("")
        print ("")
        prRed ("List of Vendors & MAC Address Presets")
        prPurple ("***********************************************************")
        prYellow ("SELECTION  COMPANY                        MAC Address")
        prPurple ("1          XEROX CORPORATION              00:00:00:5F:2B:4F")
        prLightPurple ("2          CISCO SYSTEMS                  00:00:0C:2F:8F:6A")
        prPurple ("3          FUJITSU LIMITED                00:00:0E:1B:C5:4F")
        prLightPurple ("4          FIBRONICS LTD                  00:00:0D:3C:1A:2E")
        prPurple ("5          NEXT INC                       00:00:0F:2F:C4:5B")
        prLightPurple ("6          SYTEK INC                      00:00:10:1D:D3:5A")
        prPurple ("7          CAMEX                          00:00:13:F3:3F:1C")
        prLightPurple ("8          ORACLE                         00:00:17:1A:F2:B5")
        prPurple ("")
        mac_answer = inputNumber(":")
        if mac_answer == 1:
            print("You have Selected a RANDOM MAC")
            print ("Which interface?" + '\n')
            print ("1 - eth0")
            print ("2 - eth1")
            print ("3 - wlan0")
            print ("4 - wlan1")
            mac_int = inputNumber(":")
            if mac_int == 1:
                mac_random = subprocess.check_output(["macchanger", "-r", "-b", "eth0"])
                print(mac_random)
                input("MAC Randomy changed. Presss Any Key to Continue")
                os.system('clear')
            elif mac_int == 2:
                mac_random = subprocess.check_output(["macchanger", "-r", "-b", "eth1"])
                print(mac_random)
                input("MAC Randomy changed. Presss Any Key to Continue")
                os.system('clear')
            elif mac_int == 3:
                mac_random = subprocess.check_output(["macchanger", "-r", "-b", "wlan0"])
                print(mac_random)
                input("MAC Randomy changed. Presss Any Key to Continue")
                os.system('clear')
            elif mac_int == 4:
                mac_random = subprocess.check_output(["macchanger", "-r", "-b", "wlan1"])
                print(mac_random)
                input("MAC Randomy changed. Presss Any Key to Continue")
                os.system('clear')
            else:
                input("You have not selected a valid preset - Press Any Key To Continue mac_answer ==1")
#PRESETS MENU
        elif mac_answer == 2:
            preset_option()
#MANUAL OPTIONS
        elif mac_answer == 3:
            print ("You have Selected the MANUAL Option")
            print ("Which interface?")
            print ("1 - eth0")
            print ("2 - eth1")
            print ("3 - wlan0")
            print ("4 - wlan1")
            mac_int = inputNumber(":")
            print ("")
            mac_manual = input("Enter the MAC Address" "Example - 00:00:12:A4:4B:5E" + '\n')
            if mac_int ==1:
                mac_change = subprocess.check_ouput(["macchanger -b -m", mac_manual, "eth0"])
            elif mac_preset ==2:
                mac_change = subprocess.call('macchanger -b -m', mac_manual, 'eth1')
            elif mac_preset ==3:
                mac_change = subprocess.call('macchanger -b -m', mac_manual, 'wlan0')
            elif mac_preset ==4:
                mac_change = subprocess.call('macchanger -b -m', mac_manual, 'wlan1')
        elif mac_answer == 4:
            os.system('clear')
        else:
            input("You did not give a valid answer, press any key to try again")
            os.system('clear')
            
    elif system_tasks_answer == 5:
        os.system('clear')
        
        
        
#PRESET OPTION MENU
#Define the Interface in use (MAC Address)
def preset_option():
    print ("You have Selected the PRESET Option")
    print ("Which interface?" + '\n')
    print ("1 - eth0")
    print ("2 - eth1")
    print ("3 - wlan0")
    print ("4 - wlan1")
    mac_int = inputNumber(":")
    if mac_int == 1:
        preset_int = "eth0"
        print(preset_int)
        mac_preset = int(input("Enter the MAC Address Selection Number" + '\n'))
        if mac_preset == 1:
            print("You entered 1 - Changing to MAC Selection Number 1" + '\n')
            s = subprocess.check_output(["macchanger", "-m", "00:00:00:5F:2B:4F", preset_int])
            print(s)
            input("Press any key to continue")
            system_tasks()
        elif mac_preset == 2:
            print("You entered 2 - Changing to MAC Selection Number 2" + '\n')
            s = subprocess.check_output(["macchanger", "-m", "00:00:0C:2F:8F:6A", preset_int])
            print(s)
            input("Press any key to continue")
            system_tasks()
        elif mac_preset == 3:
            print("You entered 3 - Changing to MAC Selection Number 3" + '\n')
            s = subprocess.check_output(["macchanger", "-m", "00:00:0E:1B:C5:4F", preset_int])
            print(s)
            input("Press any key to continue")
            system_tasks()
        elif mac_preset == 4:
            print("You entered 4 - Changing to MAC Selection Number 4" + '\n')
            s = subprocess.check_output(["macchanger", "-m", "00:00:0D:3C:1A:2E", preset_int])
            print(s)
            input("Press any key to continue")
            system_tasks()
        elif mac_preset == 5:
            print("You entered 5 - Changing to MAC Selection Number 5" + '\n')
            s = subprocess.check_output(["macchanger", "-m", "00:00:0F:2F:C4:5B", preset_int])
            print(s)
            input("Press any key to continue")
            system_tasks()
        elif mac_preset == 6:
            print("You entered 5 - Changing to MAC Selection Number 6" + '\n')
            s = subprocess.check_output(["macchanger", "-m", "00:00:10:1D:D3:5A", preset_int])
            print(s)
            input("Press any key to continue")
            system_tasks()
        elif mac_preset == 7:
            print("You entered 7 - Changing to MAC Selection Number 7" + '\n')
            s = subprocess.check_output(["macchanger", "-m", "00:00:13:F3:3F:1C", preset_int])
            print(s)
            input("Press any key to continue")
            system_tasks()
        elif mac_preset == 8:
            print("You entered 8 - Changing to MAC Selection Number 8" + '\n')
            s = subprocess.check_output(["macchanger", "-m", "00:00:17:1A:F2:B5", preset_int])
            print(s)
            input("Press any key to continue")
            system_tasks()
        else:
            print("You didn't enter A valid Selection")
            system_tasks()
    elif mac_int == 2:
        preset_int = "eth1"
        print("Coming Soon")
    elif mac_int == 3:
        preset_int = "wlan0"
        mac_preset = int(input("Enter the MAC Address Selection Number" + '\n'))
        if mac_preset == 1:
            print("You entered 1 - Changing to MAC Selection Number 1" + '\n')
            s = subprocess.check_output(["macchanger", "-m", "00:00:00:5F:2B:4F", preset_int])
            print(s)
            input("Press any key to continue")
            system_tasks()
        elif mac_preset == 2:
            print("You entered 2 - Changing to MAC Selection Number 2" + '\n')
            s = subprocess.check_output(["macchanger", "-m", "00:00:0C:2F:8F:6A", preset_int])
            print(s)
            input("Press any key to continue")
            system_tasks()
        elif mac_preset == 3:
            print("You entered 3 - Changing to MAC Selection Number 3" + '\n')
            s = subprocess.check_output(["macchanger", "-m", "00:00:0E:1B:C5:4F", preset_int])
            print(s)
            input("Press any key to continue")
            system_tasks()
        elif mac_preset == 4:
            print("You entered 4 - Changing to MAC Selection Number 4" + '\n')
            s = subprocess.check_output(["macchanger", "-m", "00:00:0D:3C:1A:2E", preset_int])
            print(s)
            input("Press any key to continue")
            system_tasks()
        elif mac_preset == 5:
            print("You entered 5 - Changing to MAC Selection Number 5" + '\n')
            s = subprocess.check_output(["macchanger", "-m", "00:00:0F:2F:C4:5B", preset_int])
            print(s)
            input("Press any key to continue")
            system_tasks()
        elif mac_preset == 6:
            print("You entered 5 - Changing to MAC Selection Number 6" + '\n')
            s = subprocess.check_output(["macchanger", "-m", "00:00:10:1D:D3:5A", preset_int])
            print(s)
            input("Press any key to continue")
            system_tasks()
        elif mac_preset == 7:
            print("You entered 7 - Changing to MAC Selection Number 7" + '\n')
            s = subprocess.check_output(["macchanger", "-m", "00:00:13:F3:3F:1C", preset_int])
            print(s)
            input("Press any key to continue")
            system_tasks()
        elif mac_preset == 8:
            print("You entered 8 - Changing to MAC Selection Number 8" + '\n')
            s = subprocess.check_output(["macchanger", "-m", "00:00:17:1A:F2:B5", preset_int])
            print(s)
            input("Press any key to continue")
            system_tasks()
        else:
            print("You didn't enter A valid Selection")
            system_tasks()
    elif mac_int == 4:
        print("You entered 1 - Changing to MAC Selection Number 1" + '\n')
        input("Press any key to continue")
        system_tasks()
    else:
        print("end")

            
#Define Application Specific Tools - Level 1
def app_specific_tools_level_1():
    os.system('clear')
    banner()
    prPurple("Choose an applications tool")
    print ("")
    prLightPurple(" 1) Wordpress Tools")
    prYellow(" 2) Back")
    app_specific_tools_level_1_answer = inputNumber(":")
    if app_specific_tools_level_1_answer ==1:
        app_specific_tools_level_2()
    elif app_specific_tools_level_1_answer ==2:
        os.system('clear')
    else:
        input("You did not give a valid answer, press any key to try again")
        os.system('clear')
        app_specific_tools_level_1()
        
#Define Application Specific Tools - Level 2
def app_specific_tools_level_2():
    os.system('clear')
    banner()
    prPurple("Choose an WorddPress Sepcific tool")
    print ("")
    prLightPurple(" 1) Wordpress XML RPC Brute Forcer")
    prLightPurple(" 2) WPFORCE")
    prLightPurple(" 3) WPSCAN")
    prLightPurple(" 4) WPSPLOIT")
    prLightPurple(" 5) WPWNER")
    prYellow(" 6) Back")
    app_specific_tools_level_2_answer = inputNumber(":")
    if app_specific_tools_level_2_answer ==1:
        try:
            app = "./tools/2-application-specific-tools/wordpress/Wordpress-XMLRPC-Brute-Force-Exploit/wordpress-xmlrpc-brute-v2.py"
            app_split = shlex.split(app)
            print ("Enter XML File path followed by Wordlist followed by usename with spaces in between each")
            command_line1 = input()
            xml_args = shlex.split(command_line1)
            wordlist = "./wordlists/SecLists/Passwords/rockyou.txt"
            ws_args = shlex.split(wordlist)
            print ("Enter the name of the user to test")
            command_line2 = input()
            user_args = shlex.split(command_line2)
            s = app_split + xml_args + ws_args + user_args
            x = subprocess.call(s)
            input("Press any key to return to the menu")
            os.system('clear')
            app_specific_tools_level_2()
        except KeyboardInterrupt:
            os.system('clear')
            app_specific_tools_level_2()
    elif app_specific_tools_level_2_answer ==2:
        try:
            print ("WPForce Menu")
            app = "python ./tools/2-application-specific-tools/WPForce/wpforce.py"
            app_args = shlex.split(app)
            print ("Usage Menu")
            print ("Usage: wpforce.py [-h] -i INPUT -w WORDLIST -u URL [-v] [-t THREADS] [-a AGENT] [-d]")
            print ("")
            print ("Enter the Input command [-i]")
            command_input1 = "-i " + input()
            command1_args = shlex.split(command_input1)
            wordlist = "-w ./wordlists/SecLists/Passwords/rockyou.txt"
            wl_args = shlex.split(wordlist)
            print ("Enter the name of the URL to test [-u]")
            command_input2 = "-u " + input()
            url_args = shlex.split(command_input2)
            threads = "15"
            threads_args = shlex.split(threads)
            agent = '"-a Mozilla/5.0 (iPad; U; CPU OS 3_2_1 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Mobile/7B405"'
            agent_args = shlex.split(agent)
            debug = "-d"
            debug_args = shlex.split(debug)
            s = app_args + command1_args + wl_args + url_args + agent_args + debug_args
            print (s)
            x = subprocess.call(s)
            print ("")
            input("Press any key to return to the menu")
            os.system('clear')
            app_specific_tools_level_2()
        except KeyboardInterrupt:
            os.system('clear')
            app_specific_tools_level_2()
    elif app_specific_tools_level_2_answer ==3:
        print ("add full path3")
        os.system('clear')
    elif app_specific_tools_level_2_answer ==4:
        print ("add full path4")
        os.system('clear')
    elif app_specific_tools_level_2_answer ==5:
        print ("add full path5")
        os.system('clear')
    elif app_specific_tools_level_2_answer ==6:
        app_specific_tools_level_1
        os.system('clear')
    else:
        input("You did not give a valid answer, press any key to try again")
        os.system('clear')
        
#Define Brute Forcers Menu
def brute_forcers():
    os.system('clear')
    banner()
    prPurple("Choose the appropriate Brute Force testing tool")
    print ("")
    prLightPurple(" 1) Medusa")
    prLightPurple(" 2) Patator")
    prLightPurple(" 3) Ncrack")
    prYellow(" 4) Back")
    brute_forcers_answer = inputNumber(":")
    if brute_forcers_answer ==1:
        print ("add full path1")
        os.system('clear')
    elif brute_forcers_answer ==2:
        print ("add full path2")
        os.system('clear')
    elif brute_forcers_answer ==3:
        ncrack_menu()
        os.system('clear')
    elif brute_forcers_answer ==4:
        menu()
        os.system('clear')
    else:
        input("You did not give a valid answer, press any key to try again")
        os.system('clear')
        
##Define Brute Forcers SUB MENU 
def ncrack_menu():
    os.system('clear')
    prRed("NCRACK Micro$oft Remote Desktop Brute Forcing Menu")
    prGreen("#######################################################")
    print("")
    print("")
    prGreen("==============Wordlists================================")
    prGreen("Selection        Type                            Wordlist")
    prPurple("1                Usernames or Passwords          rockyou10")
    prLightPurple("2                Usernames or Passwords          rockyou20")
    prPurple("3                Usernames                       rockyou70")
    prLightPurple("4                Usernames                       rockyou75")
    prPurple("5                Usernames                       names")
    prLightPurple("6                Passwords                       10_million_password_list_top_100000.txt")
    prPurple("7                Passwords                       10_million_password_list_top_1000000.txt")
    prLightPurple("8                Passwords                       john")
    prPurple("9                Passwords                       darkc0de")
    prLightPurple("10               Passwords                       english")
    prPurple("11               Passwords                       alleged-gmail-passwords")
    print("")
#Username Entry
    ncrack_user = input("Custom Username? Answer - (Yes) or (No) or (Back To Main Menu)" + '\n')
    if ncrack_user == 'Yes' or ncrack_user == 'yes' or ncrack_user == 'YES' or ncrack_user == 'Y' or ncrack_user == 'y':
        ncrack_user = input("Enter the Username" + '\n')
        ncrack_total = "--user " + ncrack_user
        print(ncrack_total)
        ncrack_user_shlex = shlex.split(ncrack_total)
    elif ncrack_user == 'No' or ncrack_user == 'no' or ncrack_user == 'NO' or ncrack_user == 'N' or ncrack_user == 'n':
        ncrack_user = int(input("Select the wordlist for the Username from above" + '\n'))
        if ncrack_user ==1:
            ncrack_user = "./wordlists/SecLists/Passwords/rockyou-10.txt"
            ncrack_user_shlex = shlex.split(ncrack_user)
        elif ncrack_user ==2:
            ncrack_user = "./wordlists/SecLists/Passwords/rockyou-20.txt"
            ncrack_user_shlex = shlex.split(ncrack_user)
        elif ncrack_user ==3:
            ncrack_user = "./wordlists/SecLists/Usernames/Names/names.txt"
            ncrack_user_shlex = shlex.split(ncrack_user)
        else:
            print("You must select a number from above")
            input("Press Any Key To Continue")
            ncrack_menu()
    elif ncrack_user == 'B' or ncrack_user == 'b' or ncrack_user == 'back' or ncrack_user =='BACK':
        os.system('clear')
        return
    else:
        print("Please answer either, Yes or No" + '\n')
        input("Press Any Key To Continue" + '\n')
        ncrack_menu()
#Password Entry
    ncrack_password = int(input("Enter the Selection Number for the Password to use" + '\n'))
    if ncrack_password == 1:
        ncrack_password = "-P ./wordlists/SecLists/Passwords/rockyou-10.txt"
        ncrack_password_shlex = shlex.split(ncrack_password)
        print(ncrack_password)
    elif ncrack_password == 2:
        ncrack_password = "-P ./wordlists/SecLists/Passwords/rockyou-20.txt"
        ncrack_password_shlex = shlex.split(ncrack_password)
    elif ncrack_password == 3:
        ncrack_password = "-P ./wordlists/SecLists/Passwords/rockyou-70.txt"
        ncrack_password_shlex = shlex.split(ncrack_password)
    elif ncrack_password == 4:
        ncrack_password = "-P ./wordlists/SecLists/Passwords/rockyou-75.txt"
        ncrack_password_shlex = shlex.split(ncrack_password)
    elif ncrack_password == 5:
        ncrack_password = "-P ./wordlists/SecLists/Usernames/Names/names.txt"
        ncrack_password_shlex = shlex.split(ncrack_password)
    elif ncrack_password == 6:
        ncrack_password = "-P ./wordlists/SecLists/Passwords/10_million_password_list_top_100000.txt"
        ncrack_password_shlex = shlex.split(ncrack_password)
    elif ncrack_password == 7:
        ncrack_password = "-P ./wordlists/SecLists/Passwords/10_million_password_list_top_1000000.txt"
        ncrack_password_shlex = shlex.split(ncrack_password)
    elif ncrack_password == 8:
        ncrack_password = "-P ./wordlists/SecLists/Passwords/john.txt"
        ncrack_password_shlex = shlex.split(ncrack_password)
    elif ncrack_password == 9:
        ncrack_password = "-P ./wordlists/SecLists/Passwords/darkc0de.txt"
        ncrack_password_shlex = shlex.split(ncrack_password)
    elif ncrack_password == 10:
        ncrack_password = "-P ./wordlists/SecLists/Passwords/english.txt"
        ncrack_password_shlex = shlex.split(ncrack_password)
    elif ncrack_password == 11:
        ncrack_password = "-P ./wordlists/SecLists/Passwords/alleged-gmail-passwords.txt"
        ncrack_password_shlex = shlex.split(ncrack_password)
    else:
        print("You must select a number from above" + '\n')
        input("Press any Key to start Over")
#IP Entry        
    ncrack_ip = input("Enter the IP Address To Test" + '\n')
    print("You Entered", ncrack_ip)
    ncrack_ip_shlex = shlex.split(ncrack_ip)
#Port Entry
    port_num = input("Assume Port 3389? Yes for 3389, 'No' for a different port" + '\n')
    if port_num == "Yes":
        port_num = " -p 3389"
        port_num_shlex = shlex.split(port_num)
    elif port_num == "No":
        port_num = input("Enter the Port Number to test")
        port_num_shlex = shlex.split(port_num)
    else:
        print("You didn't select a valid option" + '\n')
    ncrack_path = "/usr/local/bin/ncrack"
    ncrack_path_shlex = shlex.split(ncrack_path)
    complete_command = ncrack_path_shlex + ncrack_user_shlex + ncrack_password_shlex + ncrack_ip_shlex + port_num_shlex
    #print(complete_command)
    subprocess.call(complete_command)
    input("Press Any Key To Continue")
    
                                
#Define Enumeration Tools
def enumeration_tools():
    os.system('clear')
    banner()
    prPurple("Choose the appropriate Enumeration tool")
    print ("")
    prLightPurple(" 1) Database Tools")
    prLightPurple(" 2) Dir Buster (dirb)")
    prLightPurple(" 3) The Harvester")
    prLightPurple(" 4) Mass Scan")
    prLightPurple(" 5) Multi Purpose Tools")
    prLightPurple(" 6) Network Discover")
    prLightPurple(" 7) NMAP")
    prLightPurple(" 8) Osueta")
    prLightPurple(" 9) Paros")
    prLightPurple("10) Recon-ng")
    prLightPurple("11) Wafw00f")
    prLightPurple("12) Website Tools")
    prYellow("13) Back")
    enumeration_answer = inputNumber(":")
    if enumeration_answer ==1:
        os.system('clear')
        database_menu()
    elif enumeration_answer ==2:
        try:
            print ("Usage:")
            print ("./dirb <url_base> [<wordlist_file(s)>] [options]")
            print ("")
            print ("Please enter the URL to Test")
            print ("")
            url = input()
            url_args = shlex.split(url)
            app = "./tools/4-enumeration-tools/dirb/dirb"
            app_args = shlex.split(app)
            wordlist = "./tools/4-enumeration-tools/dirb/wordlists/common.txt"
            wordlist_args = shlex.split(wordlist)
            s = app_args + url_args + wordlist_args
            x = subprocess.call(s)
        except KeyboardInterrupt:
            os.system('clear')
    elif enumeration_answer ==3:
        print ("Run the Harvester")
    elif enumeration_answer ==4:
        print ("Run Mass Scan")
    elif enumeration_answer ==5:
        os.system('clear')
        multi_tool_menu()
    elif enumeration_answer ==6:
        try:
            print ("Network Discover")
            print ("Please Enter the IP Address or Range to scan - PRESS 'ALT+q' To EXIT to Main Menu")
            netdiscover = input("")
            nd = subprocess.call(['/usr/sbin/netdiscover','-r', netdiscover])
            os.system('clear')
        except KeyboardInterrupt:
            os.system('clear')
            enumeration_tools()
    elif enumeration_answer ==7:
        os.system('clear')
        print ("###Welcome to the NMAP Command line###")
        print ("Enter the host to scan")
        option1 = input(":")
        if workspace ==1:
            a = subprocess.Popen(["/usr/bin/nmap", option1], stdout=absolute_path)
            print (a)
            print ("")
            menu1 = input("Press any key to return to the main menu")
            os.system('clear')
        else:
            b = subprocess.call(["/usr/bin/nmap", option1])
            print (b)
            print ("")
            menu1 = input("Press any key to return to the main menu")
            os.system('clear') 
    elif enumeration_answer ==8:
        print ("Osueta")
    elif enumeration_answer ==9:
        print ("Paros")
    elif enumeration_answer ==10:
        print ("Recon-ng")
    elif enumeration_answer ==11:
        print ("wafw00f")
    elif enumeration_answer ==12:
        website_tools_menu()
    elif enumeration_answer ==13:
        menu()
        os.system('clear')
    else:
        input("You did not give a valid answer, press any key to try again")
        os.system('clear')
        database()

#Database Tools
def database_menu():
    os.system('clear')
    banner()
    prPurple("Choose the appropriate Database Testing Tool")
    print ("")
    prLightPurple(" 1) Odat - Oracle Database Attacking Tool")
    prYellow(" 2) Back")
    database_answer = inputNumber(":")
    if database_answer ==1:
        print ("Odat Menu")
    elif database_answer ==2:
        enumeration_tools()
    else:
        input("You did not give a valid answer, press any key to try again")
        os.system('clear')
        
#Multi Tools Menu
def multi_tool_menu():
    os.system('clear')
    banner()
    prPurple("Choose the appropriate Multi Tools")
    print ("")
    prLightPurple(" 1) Patator")
    prYellow(" 2) Back")
    multi_tool_answer = inputNumber(":")
    if multi_tool_answer ==1:
        print ("Run Patator")
    elif multi_tool_answer ==2:
        enumeration_tools()
    else:
        input("You did not give a valid answer, press any key to try again")
        os.system('clear')

#Wafw00f
def wafw00f():
    os.system('clear')
    banner()
    print("Wafw00f - Web Application Firewall Detection Tool")
    print("WAFW00F allows one to identify and fingerprint Web Application Firewall (WAF) products protecting a website.")
    print("")
    url = input("Enter the URL of the website to test - Include http:// or https://")
    app = ""
    
#Website Tools
def website_tools_menu():
    os.system('clear')
    banner()
    prPurple("Choose the appropriate Website Tools")
    print ("")
    prLightPurple(" 1) b374k")
    prLightPurple(" 2) Nikto")
    prLightPurple(" 3) Weevely3")
    prLightPurple(" 4) wfuzz")
    prYellow(" 5) Back")
    website_tools_menu_answer = inputNumber(":")
    if website_tools_menu_answer ==1:
        print ("Run b374k")
    elif website_tools_menu_answer ==2:
        try:
            print ("Run Nikto")
            app = "./tools/4-enumeration-tools/nikto/program/nikto.pl"
            app_split = shlex.split(app)
            print ("Usage:")
            print ("")
            print ("Enter the host to test - including 'http' or 'https'")
            url = "-h " + input() + " -C all"
            url_args = shlex.split(url)
            s = app_split + url_args
            os.system('clear')
            prRed("Running Nikto")
            x = subprocess.call(s)
            input("Press any key to return to the menu")
            os.system('clear')
            website_tools_menu()
        except KeyboardInterrupt:
            os.system('clear')
            website_tools_menu()
    elif website_tools_menu_answer == 3:
        print ("Run weevely3")
    elif website_tools_menu_answer == 4:
        print ("wfuzz")
    elif website_tools_menu_answer == 5:
        os.system('clear')
    else:
        input("You did not give a valid answer, press any key to try again")
        os.system('clear')
    
#Exploitation Tools Menu
def exploitation_tools_menu():
    os.system('clear')
    banner()
    prPurple("Choose the appropriate Exploit")
    print ("")
    prLightPurple(" 1) Metasploit Framework")
    prLightPurple(" 2) w3af - Web Application & Audit Framework")
    prLightPurple(" 3) sqlmap")
    prYellow(" 4) Back")
    exploitation_tools_answer = inputNumber(":")
    if exploitation_tools_answer == 1:
        subprocess.call(['./tools/5-exploitation-tools/metasploit-framework/msfupdate'])
        subprocess.call(['./tools/5-exploitation-tools/metasploit-framework/msfconsole'])
        exploitation_tools_menu()
        os.system('clear')
    elif exploitation_tools_answer == 2:
        print ("Run w3af")
    elif exploitation_tools_answer == 3:
        print ("Run sqlmap")
    elif exploitation_tools_answer == 4:
        os.system('clear')
    else:
        input("You did not give a valid answer, press any key to try again")
        os.system('clear')

#Evasion Tools
def evasion_tools_menu():
    os.system('clear')
    banner()
    prPurple("Choose the appropriate Evasion Tools")
    print ("")
    prLightPurple(" 1) Majic Unicorn")
    prYellow(" 2) Back")
    evasion_tools_answer = inputNumber(":")
    if evasion_tools_answer == 1:
        print ("Run Patator")
    elif evasion_tools_answer == 2:
        os.system('clear')
    else:
        input("You did not give a valid answer, press any key to try again")
        os.system('clear')

#Password Cracking Tools
def password_cracking_tools_menu():
    os.system('clear')
    banner()
    prPurple("Choose the Password Cracking Tools")
    print ("")
    prLightPurple(" 1) JohnTheRipper")
    prYellow(" 2) Back")
    password_cracking_answer = inputNumber(":")
    if password_cracking_answer == 1:
        print ("Run John The Ripper")
    elif password_cracking_answer == 2:
        os.system('clear')
    else:
        input("You did not give a valid answer, press any key to try again")
        os.system('clear')

#VPN Tools Menu
def vpn_tools_menu():
    os.system('clear')
    banner()
    prPurple("Choose the VPN Tools Menu Tools")
    print ("")
    prLightPurple(" 1) ikeforce")
    prLightPurple(" 2) ike-scan")
    prYellow(" 3) Back")
    #vpn_tools_answer = int(input(":"))
    vpn_tools_answer = inputNumber(":")
    if vpn_tools_answer == 1:
        print ("Run ikeforce")
    elif vpn_tools_answer == 2:
        print ("Run ikescan")
    elif vpn_tools_answer == 3:
        os.system('clear')
    else:
        input("You did not give a valid answer, press any key to try again VPN")
        os.system('clear')
        
#Define Option 9 - Update Github Branches in /opt
def git_hub_update():
    print ("Update All Github Repos in /opt")
    git = subprocess.call('find /opt -name .git -type d | xargs -n1 -P4 -I% git --git-dir=% --work-tree=%/.. remote update -p', shell=True)
    os.system('clear')


#Input Validation
def inputNumber(message):
    while True:
        try:
            userInput = int(input(message))
        except ValueError:
            print("Not a Valid Number - Try again.")
            continue
        else:
            return userInput
        break
                
loop=True

while loop:
    print (menu())
    mm_answer = inputNumber(":")
    if mm_answer == 0:
        workspace_menu()
    elif mm_answer == 1:
        system_tasks()
    elif mm_answer == 2:
        app_specific_tools_level_1()
    elif mm_answer == 3:
        brute_forcers()
    elif mm_answer == 4:
        enumeration_tools()
    elif mm_answer == 5:
        exploitation_tools_menu()
    elif mm_answer == 6:
        evasion_tools_menu()
    elif mm_answer == 7:
        password_cracking_tools_menu()
    elif mm_answer == 8:
        vpn_tools_menu()
    elif mm_answer == 9:
        git_hub_update()
    elif mm_answer == 11:
        break
    else:
        input("You did not give a valid answer, press any key to try again") 
        os.system('clear')

